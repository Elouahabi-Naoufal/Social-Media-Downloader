Here's a complete and clear instruction for a developer using **React + Vite** on the frontend, guiding them to install and use the `social-media-downloader` package with a Python backend:

---

### ðŸ§© How the `social-media-downloader` Package Works

The `social-media-downloader` Python package allows you to **extract direct download URLs** (for videos or images) from social media links. It **does not download files itself**â€”instead, it gives you the **real, downloadable media URL**, which you can then:

* Send to a frontend
* Stream to the user
* Use for further processing

It supports platforms like:

* Instagram
* TikTok
* Facebook
* Twitter
* And more

---

### âœ… What You Need to Do

**1. Install the package in your Python environment:**

```bash
pip install social-media-downloader
```

---

**2. Use the package in your backend logic:**

Import the downloader, extract the media URL, and stream the media file to the frontend:

```python
from social_media_downloader import Downloader
from flask import Flask, request, Response
import requests

app = Flask(__name__)
downloader = Downloader()

@app.route('/api/download', methods=['POST'])
def download():
    data = request.get_json()
    url = data.get("url")

    try:
        info = downloader.get_info(url)
        media_url = info.download_url
        filename = media_url.split("/")[-1].split("?")[0] or "media.mp4"

        def generate():
            with requests.get(media_url, stream=True) as r:
                r.raise_for_status()
                for chunk in r.iter_content(chunk_size=8192):
                    yield chunk

        return Response(
            generate(),
            mimetype='application/octet-stream',
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        return {"error": str(e)}, 400
```

This code:

* Accepts a POST request with a social media URL
* Uses `social-media-downloader` to fetch the real media link
* Streams that media file directly to the user's browser (no server-side storage)

---

Let me know if you'd like me to pair this with the **React component code** or a production-ready folder structure.
